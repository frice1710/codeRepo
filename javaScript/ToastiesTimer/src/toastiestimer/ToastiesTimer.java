/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package toastiestimer;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author frice
 */
public class ToastiesTimer extends javax.swing.JFrame implements Runnable{
  
   private volatile boolean isRunning;
    
    Date startTime= null;
    
    Thread startThread;
    
    /**
     * Creates new form ToastiesTimer
     */
    public ToastiesTimer() {
        initComponents();
        
        
        
        
    }
    public void run(){
        
            NumberFormat nf = new DecimalFormat("00");
            
            while(isIsRunning()){
                System.out.println("Timing....");
                
                long min,sec;
                sec = (getDisplayTimeMillis()/1000 % 60);
                min = getDisplayTimeMillis()/60000 %60;
                //  System.out.println(sec);
                stopwatch.setText(nf.format(min)+":"+nf.format(sec));
               if(sec%2==0){
                   stopwatch.setBackground(Color.red);
               }
                
            }
             System.out.println("Stop Timer");
        
        }
    
    DateFormat DF = new SimpleDateFormat("HH:mm:ss:SS");
    public Date setStartTime(){
       Calendar calendar = Calendar.getInstance();
       Date dateNow = calendar.getTime();
       return  dateNow;
    
    }
    
    public Long getDisplayTimeMillis(){
         Calendar calendar = Calendar.getInstance();
        Date currentTime = calendar.getTime();
        
        
        Long TimeInMillis = (currentTime.getTime()-startTime.getTime());
        return TimeInMillis;
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        stopwatch = new javax.swing.JLabel();
        Start = new javax.swing.JButton();
        Stop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        stopwatch.setFont(new java.awt.Font("DS-Digital", 0, 48)); // NOI18N
        stopwatch.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stopwatch.setText("00:00");

        Start.setText("Start");
        Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartActionPerformed(evt);
            }
        });

        Stop.setText("Stop");
        Stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(stopwatch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addComponent(Start)
                .addGap(73, 73, 73)
                .addComponent(Stop)
                .addContainerGap(128, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(stopwatch, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Start)
                    .addComponent(Stop))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartActionPerformed
        // TODO add your handling code here:
        setIsRunning(true);
        // TODO add your handling code here:
        startThread = new Thread(this);
        if(evt.getActionCommand().equals("Start"))
        {
            startThread.start();
            startTime=setStartTime();
            //Stop.setText("Stop");
            
        }
        
        
          
       
        
        
    }//GEN-LAST:event_StartActionPerformed

    public void stopThread(){
       
        System.out.println("In Stop Thread method");
        System.out.println("Thread Count" + Thread.activeCount());
        
        this.setIsRunning(false);
      
        
    }
    
    
    
    private void StopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopActionPerformed
        // TODO add your handling code here:
        
        System.out.println("Stop Pressed");
       try {
           Thread.sleep(10);
       } catch (InterruptedException ex) {
           Logger.getLogger(ToastiesTimer.class.getName()).log(Level.SEVERE, null, ex);
       }
       
       
       this.stopThread();
      //  this.startThread.interrupt();
    
           
           
           
    }//GEN-LAST:event_StopActionPerformed

    /* @param args the command line arguments */
     
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ToastiesTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ToastiesTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ToastiesTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ToastiesTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ToastiesTimer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Start;
    private javax.swing.JButton Stop;
    private javax.swing.JLabel stopwatch;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the isRunning
     */
    public boolean isIsRunning() {
        return isRunning;
    }

    /**
     * @param isRunning the isRunning to set
     */
    public void setIsRunning(boolean isRunning) {
        this.isRunning = isRunning;
    }


}
